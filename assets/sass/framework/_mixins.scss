// Mixins para media queries
// El parámetro es el nombre del breakpoint

@mixin hasta($size){
	@if map-has-key($grid-breakpoints,$size){
    // Si el parámetro es el nombre de un tamaño, se extrae desde el map
		@media screen and (max-width: map-get($grid-breakpoints,$size) - 1){
			@content;
		}
	} @else {
    // Si el parámetro no existe en el map, se toma su valor para construir la media query
		 @media screen and (max-width: $size){
			@content;
		}
	}
}

@mixin desde($size){
	@if map-has-key($grid-breakpoints,$size){
    // Si el parámetro es el nombre de un tamaño, se extrae desde el map
		@media screen and (min-width: map-get($grid-breakpoints,$size)){
			@content;
		}
	} @else {
    // Si el parámetro no existe en el map, se toma su valor para construir la media query
		 @media screen and (min-width: $size){
			@content;
		}
	}
}

@mixin desde-hasta($desde,$hasta){
	@if map-has-key($grid-breakpoints,$desde) and map-has-key($grid-breakpoints,$hasta){
		@media screen and (min-width: map-get($grid-breakpoints,$desde)) and (max-width: map-get($grid-breakpoints,$hasta) - 1){
			@content;
		}
	} @else if map-has-key($grid-breakpoints,$desde) and not map-has-key($grid-breakpoints,$hasta){
		@media screen and (min-width: map-get($grid-breakpoints,$desde)) and (max-width: $hasta) {
			@content;
		}
	} @else if not map-has-key($grid-breakpoints,$desde) and map-has-key($grid-breakpoints,$hasta) {
		@media screen and (min-width: $desde) and (max-width: map-get($grid-breakpoints,$hasta) - 1){
			@content;
		}
	} @else {
		@media screen and (min-width: $desde) and (max-width: $hasta){
			@content;
		}
	}
}

// Mixins para cuadriculas
// Se aplica al contendor de la cuadricula.
// Los parámetros son el selector de cada item y el número de columnas
// El tercer parámetro (opcional) es la separacion entre columnas (en porcentaje)
@mixin cuadricula($items,$columnas,$separacion:2%){
	// por si el contenedor es un ul
	@if $items == li {
		margin     : 0;
		padding    : 0;
		list-style : none;

		li {
			margin-left: 0;
		}
	}

    // Limpiar los floats para el contenedor
	&:before, &:after {
		clear   : both;
		content : " ";
		display : table;
		width   : 100%;
	}

	& > #{$items}, & > .#{$items}{
		float          : left;
		width          : (100% - $separacion * ($columnas - 1)) / $columnas;
		margin-right   : $separacion;
		margin-bottom  : $separacion;

        //Limpiar el float para el último elemento de cada fila
		&:nth-child(#{$columnas}n){
			margin-right : 0;
			clear        : right;
		}

        //Limpiar el float para el primer elemento de cada fila
		&:nth-child(#{$columnas}n+1){
			clear        : left;
		}
	}
}

@mixin boton(
	$width: 100px,
	$height: 40px,
	$font-size: 1em, // Tamaño de fuente
	$color: $gray,  //Color del texto
	$background: $white, // Color de fondo
	$hover: $white,  // Fondo para el botón en hover
	$line-height: $height, // Altura del botón
	$border-radius: 0,  // Border radius
	$border: none, //1px solid rgba(#000,.2),  // Estilo del borde
	$padding: 2em,  // Padding izquierdo y derecho
	$text-decoration: none
	){
	min-width 	  : $width;
	height  	  : $height;
	font-size     : $font-size;
	color         : $color;
	background    : $background;
	display       : inline-block;
	line-height   : $line-height;
	padding       : 0 $padding;
	border        : $border;
	border-radius : $border-radius;
	cursor        : pointer;
	margin        : 0 5px;
	text-decoration: $text-decoration;
	text-transform: uppercase;
	vertical-align: middle;
	letter-spacing: .5px;
	@extend .z-depth-1;
	&:hover{
		background : $hover;
		@extend .z-depth-1-half;
	}
}


@mixin circular ($width: 50px, $height: 50px, $padding: 0.5em){
	width: 			$width;
	height: 		$height;
	min-width: 		$width;
	min-height: 	$height;
	border-radius: 	50%;
	padding       : $padding;
}

@mixin clear_b{
    &:after, &:before{
        content: "";
        clear: both;
        display: table;
    }
}
